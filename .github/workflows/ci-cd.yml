# CI/CD workflow.
#
# You may wish to change the name of the IMAGE_NAME environment variable. This
# variable is used to name the docker image.
#
# Author: Mathias Reker (https://github.com/MathiasReker).

name: CI/CD

on:
  push: # The branches below must match the branches that you would like to trigger on push requests
    branches: dev

    tags:
      - v*.*.*

  pull_request:
    branches:
      - '*'

env:
  IMAGE_NAME: kijani-rest-api
  DEV_BRANCH: dev

jobs:
  CI:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:latest
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: unittest
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=5

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
          cache: 'maven'

      - name: Configure the application.properties file
        run: |
          echo "server.port=8080
          spring.datasource.url=jdbc:mysql://localhost:3306/unittest
          spring.datasource.username=root
          spring.datasource.password=
          spring.jpa.properties.hibernate.jdbc.time_zone=UTC
          spring.jpa.hibernate.ddl-auto=update
          spring.data.jpa.repositories.bootstrap_mode=default" >"./src/main/resources/application.properties"
      - name: Build & Test
        run: mvn -B verify --file pom.xml

  CD:
    if: github.event_name != 'pull_request'

    runs-on: ubuntu-latest
    needs: CI

    permissions:
      packages: write
      contents: read

    steps:
      - uses: actions/checkout@v3

      - name: Build jar file
        run: mvn clean install -DskipTests

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"

      - name: Log in to registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u $ --password-stdin

      - name: Push image
        run: |
          # Change all uppercase to lowercase
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `dev` tag
          [ "$VERSION" == "$DEV_BRANCH" ] && VERSION=dev
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
      - name: Configure SSH
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/github-action.pem
          chmod 600 ~/.ssh/github-action.pem
          cat >>~/.ssh/config <<EOF
          Host server
            HostName ${{ secrets.SSH_HOST }}
            User ${{ secrets.SSH_USER }}
            IdentityFile ~/.ssh/github-action.pem
            StrictHostKeyChecking no
          EOF
      - name: Push docker compose to remote host
        run: rsync -e ssh ./docker-compose.yml server:~/

      - name: Build the stack
        run: ssh server 'sudo docker-compose pull; sudo docker-compose up -d --remove-orphans; sudo docker image prune -f'
